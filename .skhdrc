# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# move window
alt - k : yabai -m window --focus north
alt - j : yabai -m window --focus south 
alt - h : yabai -m window --focus east 
alt - l : yabai -m window --focus west 

# move window
alt + shift - k : yabai -m window --warp north
alt + shift - j : yabai -m window --warp south 
alt + shift - h : yabai -m window --warp east 
alt + shift - l : yabai -m window --warp west 

# Resize windows
lctrl + alt - h : yabai -m window --resize left:-50:0; \
                  yabai -m window --resize right:-50:0
lctrl + alt - j : yabai -m window --resize bottom:0:50; \
                  yabai -m window --resize top:0:50
lctrl + alt - k : yabai -m window --resize top:0:-50; \
                  yabai -m window --resize bottom:0:-50
lctrl + alt - l : yabai -m window --resize right:50:0; \
                  yabai -m window --resize left:50:0

# Equalize size of windows
lctrl + alt - e : yabai -m space --balance

# focus window
# cmd + ctrl - w : yabai -m window --focus next || yabai -m window --focus first
# shift + cmd + ctrl - w : yabai -m window --focus prev || yabai -m window --focus last

# focus space 
# cmd + ctrl - s : yabai -m space --focus next || yabai -m space --focus first
# shift + cmd + ctrl - s : yabai -m space --focus prev || yabai -m space --focus last

# focus monitor
cmd + ctrl - d  : yabai -m display --focus next || yabai -m display --focus first
shift + cmd + ctrl - d  : yabai -m display --focus prev || yabai -m display --focus last 
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
cmd + ctrl + alt - d : sh ~/dotfiles/scripts/move_and_follow.sh next first
shift + cmd + ctrl + alt - d : sh ~/dotfiles/scripts/move_and_follow.sh prev last 

# toggle window split type
shift + cmd + ctrl - space : yabai -m window --toggle split
cmd + ctrl - space : yabai -m window --toggle zoom-fullscreen

# layouts
cmd + ctrl - 1 : yabai -m config layout bsp
cmd + ctrl - 2 : yabai -m config layout stack 

# float / unfloat window and center on screen
# cmd + ctrl - t : yabai -m window --toggle float --grid 4:4:1:1:2:2
